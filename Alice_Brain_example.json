{
  "name": "Alice Brain example",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "8e09dc0c-aa25-4ad4-9b7f-6aba401fe425",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        200,
        260
      ],
      "id": "c8d57b00-ffa1-449b-a6f4-817d30f7ebfa",
      "name": "Webhook Trigger",
      "webhookId": "8e09dc0c-aa25-4ad4-9b7f-6aba401fe425"
    },
    {
      "parameters": {
        "jsCode": "// Parse the AI response and ensure it's valid JSON\n// Handle both OpenAI and LangChain AI Agent node outputs\nlet aiResponse;\n\n// Check if this is from an AI Agent (LangChain) or OpenAI node\nif ($input.first().json.output) {\n  // LangChain AI Agent output\n  aiResponse = $input.first().json.output.trim();\n} else if ($input.first().json.choices && $input.first().json.choices[0]) {\n  // OpenAI node output\n  aiResponse = $input.first().json.choices[0].message.content.trim();\n} else {\n  // Fallback for unknown structure\n  aiResponse = JSON.stringify($input.first().json);\n}\n\ntry {\n  // Try to parse the response as JSON\n  const parsed = JSON.parse(aiResponse);\n  \n  // Validate required fields\n  if (!parsed.speech) {\n    parsed.speech = \"I'm thinking...\";\n  }\n  \n  if (!parsed.action) {\n    parsed.action = \"idle\";\n  }\n  \n  // Validate moveTo coordinates if present\n  if (parsed.moveTo) {\n    if (typeof parsed.moveTo.x !== 'number' || typeof parsed.moveTo.y !== 'number') {\n      delete parsed.moveTo;\n    }\n    // Clamp coordinates to game bounds\n    if (parsed.moveTo) {\n      parsed.moveTo.x = Math.max(20, Math.min(1420, parsed.moveTo.x));\n      parsed.moveTo.y = Math.max(20, Math.min(680, parsed.moveTo.y));\n    }\n  }\n  \n  return [{json: parsed}];\n  \n} catch (error) {\n  // If parsing fails, treat as plain text speech\n  const fallbackResponse = {\n    speech: aiResponse.length > 0 ? aiResponse.substring(0, 100) : \"I'm having trouble thinking right now.\",\n    action: \"confused\"\n  };\n  \n  return [{json: fallbackResponse}];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        260
      ],
      "id": "0f6805eb-5e54-4532-892e-599c55038dd3",
      "name": "Format Response"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$json}}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1100,
        260
      ],
      "id": "c22f28c6-f89a-4006-92e0-9b9ce6322ca8",
      "name": "Send Response"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.body.message }}",
        "options": {
          "systemMessage": "=Placeholder system istructions."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        420,
        260
      ],
      "id": "46f2b5b1-3779-4a1c-b57b-52589c30ee1d",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        380,
        480
      ],
      "id": "82a3dda3-a80e-4a9d-9a82-217220734968",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "28a13d9aj7MCo2OB",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.body.sessionId }}",
        "contextWindowLength": 25
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        540,
        480
      ],
      "id": "dab60240-d020-4f64-b67b-fde9fe61861d",
      "name": "Simple Memory"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b8fb3129-7874-4a0c-baba-bc17c2366204",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "558d88703fb65b2d0e44613bc35916258b0f0bf983c5d4730c00c424b77ca36a"
  },
  "id": "4f3Yd9pGc7LQeyjE",
  "tags": [
    {
      "createdAt": "2025-06-23T09:06:19.059Z",
      "updatedAt": "2025-06-23T09:06:19.059Z",
      "id": "lOYcOBGbRhfDdops",
      "name": "AI Game"
    }
  ]
}